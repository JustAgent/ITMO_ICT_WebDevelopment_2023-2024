{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u041e\u0442\u0447\u0435\u0442\u044b","title":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435"},{"location":"#_1","text":"\u041e\u0442\u0447\u0435\u0442\u044b","title":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435"},{"location":"lab1/lab_1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py from socket import * ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_DGRAM) server.bind((ip, port)) while True: msg, addr = server.recvfrom(1024) print(msg.decode(\"utf-8\")) server.sendto(b\"Hello, client\", addr) \u041a\u043e\u0434 client.py from socket import * ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_DGRAM) client.connect((ip, port)) client.send(b\"Hello, server\") server_message = client.recvfrom(1024) msg = server_message[0].decode() print(msg) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py from socket import * from calculate import calculate if __name__ == \"__main__\": ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_STREAM) server.bind((ip, port)) server.listen() while True: try: print(\"Waiting for a connection...\") client, addr = server.accept() print(f\"Accepted connection from {addr}\") while True: data = client.recv(1024).decode(\"utf-8\") if not data: print(f\"Client {addr} disconnected.\") break operation, a, b = data.split(',') a, b = float(a), float(b) if operation == \"hyp\": result = calculate(cath1=a, cath2=b) elif operation == \"cath\": result = calculate(cath1=a, hyp=b) else: result = \"Invalid operation\" client.send(bytes(str(result), encoding=\"utf-8\")) except KeyboardInterrupt: print(\"Server terminated by user.\") break except Exception as e: print(f\"Error: {e}\") server.close() \u041a\u043e\u0434 client.py from socket import * if __name__ == \"__main__\": ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_STREAM) client.connect((ip, port)) input = input() client.sendall(input.encode()) answer = client.recv(1024).decode() print(answer) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py from socket import * content = open(\"Task3/index.html\").read() if __name__ == \"__main__\": ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_STREAM) server.bind((ip, port)) server.listen() while True: try: print(\"Waiting for a connection...\") client, addr = server.accept() print(f\"Accepted connection from {addr}\") response = \"HTTP/1.1 200 OK\\nContent-Type: text/html; charset=utf-8\\n\\n\" + content client.send(response.encode()) client.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break except Exception as e: print(f\"Error: {e}\") server.close() \u041a\u043e\u0434 client.py from socket import * if __name__ == \"__main__\": ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_STREAM) client.connect((ip, port)) request = \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\" client.send(request.encode('utf-8')) response = client.recv(1024).decode('utf-8') print(response) \u041a\u043e\u0434 index.html <!DOCTYPE html> <html> <head> <title>Hello, Dear client!</title> </head> <body> <h1>Hello, Dear client!</h1> </body> </html> \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py import socket import threading if __name__ == \"__main__\": clients_list = [] lock = threading.Lock() server_ip = \"127.0.0.1\" server_port = 3003 def send_message_handler(client, addr, clients_list): while True: data = client.recv(1024).decode(\"utf-8\") if not data: break with lock: for c in clients_list: if c != client: c.send(f\"{addr[1]}: {data}\".encode(\"utf-8\")) conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) conn.bind((server_ip, server_port)) conn.listen(10) while True: try: print(\"Waiting for a connection...\") client, addr = conn.accept() print(f\"Accepted connection from {addr}\") with lock: clients_list.append(client) threading.Thread(target=send_message_handler, args=(client, addr, clients_list)).start() except KeyboardInterrupt: conn.close() break \u041a\u043e\u0434 client.py from socket import * from threading import * def message_handler(client): while True: msg = client.recv(1024).decode(\"utf-8\") print(msg) if __name__ == \"__main__\": ip= '127.0.0.1' port = 3003 conn = socket(AF_INET, SOCK_STREAM) conn.connect((ip, port)) receive_thread = Thread(target=message_handler, args=(conn,)) receive_thread.start() while True: try: message = input() conn.send(message.encode(\"utf-8\")) except KeyboardInterrupt: conn.close() print(\"Terminated by user.\") break except Exception as e: print(f\"Error: {e}\") break \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0434 server.py import socket class MyHTTPServer: def __init__(self, server_ip, server_port, num_listen=1): self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.conn.bind((host, port)) self.conn.listen(num_listen) self.grades = {} def serve_forever(self): while True: client, addr = self.conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(2 * 16384).decode(encoding=\"utf-8\", errors=\"ignore\") self.parse_request(client, data) def parse_request(self, client, data): lines = data.split(\"\\n\") method, url, version = lines[0].split() if method == \"GET\": params = ( {p.split(\"=\")[0]: p.split(\"=\")[1] for p in url.split(\"?\")[1].split(\"&\")} if \"?\" in url else None ) elif method == \"POST\": body = data.split(\"\\n\")[-1] params = {p.split(\"=\")[0]: p.split(\"=\")[1] for p in body.split(\"&\")} else: params = None self.handle_request(client, method, params) def handle_request(self, client, method, params): if method == \"GET\": self.send_response(client, 200, \"OK\", self.grades_to_html()) elif method == \"POST\": discipline = params.get(\"discipline\") grade = params.get(\"grade\") self.grades[discipline] = grade self.send_response(client, 200, \"OK\", \"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e!\") else: self.send_response(client, 404, \"Not Found\", \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430.\") def send_response(self, client, code, reason, body): response = f\"HTTP/1.1 {code} {reason}\\nContent-Type: text/html\\n\\n{body}\" client.send(response.encode(\"utf-8\")) client.close() def grades_to_html(self): page = ( f\"<html><body><p>Grades:</p><ul>\" f\"{''.join([f'<li>{discipline}: {grade}' for discipline, grade in self.grades.items()])}\" f\"</ul></body></html>\" ) return page if __name__ == \"__main__\": host = \"127.0.0.1\" port = 3000 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: server.conn.close() \u041a\u043e\u0434 client.py import requests if __name__ == \"__main__\": url = \"http://localhost:3000\" params = { \"discipline\": \"math\", \"grade\": \"3\" } try: response = requests.post(url, data=params) if response.status_code == 200: print(\"POST request successful\") else: print(f\"POST request failed with status code: {response.status_code}\") except Exception as e: print(f\"An error occurred: {e}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lab1/lab_1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/lab_1/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/lab_1/#serverpy","text":"from socket import * ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_DGRAM) server.bind((ip, port)) while True: msg, addr = server.recvfrom(1024) print(msg.decode(\"utf-8\")) server.sendto(b\"Hello, client\", addr)","title":"\u041a\u043e\u0434 server.py"},{"location":"lab1/lab_1/#clientpy","text":"from socket import * ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_DGRAM) client.connect((ip, port)) client.send(b\"Hello, server\") server_message = client.recvfrom(1024) msg = server_message[0].decode() print(msg)","title":"\u041a\u043e\u0434 client.py"},{"location":"lab1/lab_1/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab1/lab_1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/lab_1/#_3","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/lab_1/#serverpy_1","text":"from socket import * from calculate import calculate if __name__ == \"__main__\": ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_STREAM) server.bind((ip, port)) server.listen() while True: try: print(\"Waiting for a connection...\") client, addr = server.accept() print(f\"Accepted connection from {addr}\") while True: data = client.recv(1024).decode(\"utf-8\") if not data: print(f\"Client {addr} disconnected.\") break operation, a, b = data.split(',') a, b = float(a), float(b) if operation == \"hyp\": result = calculate(cath1=a, cath2=b) elif operation == \"cath\": result = calculate(cath1=a, hyp=b) else: result = \"Invalid operation\" client.send(bytes(str(result), encoding=\"utf-8\")) except KeyboardInterrupt: print(\"Server terminated by user.\") break except Exception as e: print(f\"Error: {e}\") server.close()","title":"\u041a\u043e\u0434 server.py"},{"location":"lab1/lab_1/#clientpy_1","text":"from socket import * if __name__ == \"__main__\": ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_STREAM) client.connect((ip, port)) input = input() client.sendall(input.encode()) answer = client.recv(1024).decode() print(answer)","title":"\u041a\u043e\u0434 client.py"},{"location":"lab1/lab_1/#_4","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab1/lab_1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/lab_1/#_5","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/lab_1/#serverpy_2","text":"from socket import * content = open(\"Task3/index.html\").read() if __name__ == \"__main__\": ip = '127.0.0.1' port = 3000 server = socket(AF_INET, SOCK_STREAM) server.bind((ip, port)) server.listen() while True: try: print(\"Waiting for a connection...\") client, addr = server.accept() print(f\"Accepted connection from {addr}\") response = \"HTTP/1.1 200 OK\\nContent-Type: text/html; charset=utf-8\\n\\n\" + content client.send(response.encode()) client.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break except Exception as e: print(f\"Error: {e}\") server.close()","title":"\u041a\u043e\u0434 server.py"},{"location":"lab1/lab_1/#clientpy_2","text":"from socket import * if __name__ == \"__main__\": ip= '127.0.0.1' port = 3000 client = socket(AF_INET, SOCK_STREAM) client.connect((ip, port)) request = \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\" client.send(request.encode('utf-8')) response = client.recv(1024).decode('utf-8') print(response)","title":"\u041a\u043e\u0434 client.py"},{"location":"lab1/lab_1/#indexhtml","text":"<!DOCTYPE html> <html> <head> <title>Hello, Dear client!</title> </head> <body> <h1>Hello, Dear client!</h1> </body> </html>","title":"\u041a\u043e\u0434 index.html"},{"location":"lab1/lab_1/#_6","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab1/lab_1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/lab_1/#_7","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/lab_1/#serverpy_3","text":"import socket import threading if __name__ == \"__main__\": clients_list = [] lock = threading.Lock() server_ip = \"127.0.0.1\" server_port = 3003 def send_message_handler(client, addr, clients_list): while True: data = client.recv(1024).decode(\"utf-8\") if not data: break with lock: for c in clients_list: if c != client: c.send(f\"{addr[1]}: {data}\".encode(\"utf-8\")) conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) conn.bind((server_ip, server_port)) conn.listen(10) while True: try: print(\"Waiting for a connection...\") client, addr = conn.accept() print(f\"Accepted connection from {addr}\") with lock: clients_list.append(client) threading.Thread(target=send_message_handler, args=(client, addr, clients_list)).start() except KeyboardInterrupt: conn.close() break","title":"\u041a\u043e\u0434 server.py"},{"location":"lab1/lab_1/#clientpy_3","text":"from socket import * from threading import * def message_handler(client): while True: msg = client.recv(1024).decode(\"utf-8\") print(msg) if __name__ == \"__main__\": ip= '127.0.0.1' port = 3003 conn = socket(AF_INET, SOCK_STREAM) conn.connect((ip, port)) receive_thread = Thread(target=message_handler, args=(conn,)) receive_thread.start() while True: try: message = input() conn.send(message.encode(\"utf-8\")) except KeyboardInterrupt: conn.close() print(\"Terminated by user.\") break except Exception as e: print(f\"Error: {e}\") break","title":"\u041a\u043e\u0434 client.py"},{"location":"lab1/lab_1/#_8","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab1/lab_1/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/lab_1/#_9","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/lab_1/#serverpy_4","text":"import socket class MyHTTPServer: def __init__(self, server_ip, server_port, num_listen=1): self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.conn.bind((host, port)) self.conn.listen(num_listen) self.grades = {} def serve_forever(self): while True: client, addr = self.conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(2 * 16384).decode(encoding=\"utf-8\", errors=\"ignore\") self.parse_request(client, data) def parse_request(self, client, data): lines = data.split(\"\\n\") method, url, version = lines[0].split() if method == \"GET\": params = ( {p.split(\"=\")[0]: p.split(\"=\")[1] for p in url.split(\"?\")[1].split(\"&\")} if \"?\" in url else None ) elif method == \"POST\": body = data.split(\"\\n\")[-1] params = {p.split(\"=\")[0]: p.split(\"=\")[1] for p in body.split(\"&\")} else: params = None self.handle_request(client, method, params) def handle_request(self, client, method, params): if method == \"GET\": self.send_response(client, 200, \"OK\", self.grades_to_html()) elif method == \"POST\": discipline = params.get(\"discipline\") grade = params.get(\"grade\") self.grades[discipline] = grade self.send_response(client, 200, \"OK\", \"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e!\") else: self.send_response(client, 404, \"Not Found\", \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u043d\u043e\u0432\u0430.\") def send_response(self, client, code, reason, body): response = f\"HTTP/1.1 {code} {reason}\\nContent-Type: text/html\\n\\n{body}\" client.send(response.encode(\"utf-8\")) client.close() def grades_to_html(self): page = ( f\"<html><body><p>Grades:</p><ul>\" f\"{''.join([f'<li>{discipline}: {grade}' for discipline, grade in self.grades.items()])}\" f\"</ul></body></html>\" ) return page if __name__ == \"__main__\": host = \"127.0.0.1\" port = 3000 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: server.conn.close()","title":"\u041a\u043e\u0434 server.py"},{"location":"lab1/lab_1/#clientpy_4","text":"import requests if __name__ == \"__main__\": url = \"http://localhost:3000\" params = { \"discipline\": \"math\", \"grade\": \"3\" } try: response = requests.post(url, data=params) if response.status_code == 200: print(\"POST request successful\") else: print(f\"POST request failed with status code: {response.status_code}\") except Exception as e: print(f\"An error occurred: {e}\")","title":"\u041a\u043e\u0434 client.py"},{"location":"lab1/lab_1/#_10","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab2/lab_2/","text":"\u0424\u043e\u0440\u043c\u044b \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (RegistrationForm) RegistrationForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UserCreationForm \u0438\u0437 Django. \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: username (CharField): \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. email (EmailField): \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. password1 (CharField): \u041f\u0430\u0440\u043e\u043b\u044c. password2 (CharField): \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f. class RegistrationForm(UserCreationForm): email = forms.EmailField(max_length=100, help_text='Required. Enter a valid email address.') class Meta: model = User fields = ['username', 'email', 'password1', 'password2'] \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (ReservationForm) ReservationForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Reservation . \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: check_in_date (DateField): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f. check_out_date (DateField): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f. num_guests (PositiveIntegerField): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439. additional_notes (TextField, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e. class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['check_in_date', 'check_out_date', 'num_guests', 'additional_notes'] \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 (ReviewForm) ReviewForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Review . \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: review_text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430. rating (PositiveIntegerField): \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u0442\u0437\u044b\u0432\u0430. class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['review_text', 'rating'] \u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u0442\u0435\u043b\u044c (Hotel) \u041c\u043e\u0434\u0435\u043b\u044c Hotel \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0435\u043b\u044c \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: name (CharField): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430: 200 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). owner (CharField): \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430: 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). address (TextField): \u0410\u0434\u0440\u0435\u0441 \u043e\u0442\u0435\u043b\u044f. description (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f. room_types (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. price (DecimalField): \u0426\u0435\u043d\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440: 10, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u043a\u043e\u0432: 2). capacity (PositiveIntegerField): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442\u0435\u043b\u044f. amenities (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0434\u043e\u0431\u0441\u0442\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435. from django.db import models class Hotel(models.Model): name = models.CharField(max_length=200) owner = models.CharField(max_length=100) address = models.TextField() description = models.TextField() room_types = models.TextField() price = models.DecimalField(max_digits=10, decimal_places=2) capacity = models.PositiveIntegerField() amenities = models.TextField() def __str__(self): return self.name \u0411\u0440\u043e\u043d\u044c (Reservation) \u041c\u043e\u0434\u0435\u043b\u044c Reservation \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0441\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: user (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0441\u0434\u0435\u043b\u0430\u0432\u0448\u0438\u0439 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. hotel (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 Hotel): \u041e\u0442\u0435\u043b\u044c, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. check_in_date (DateField): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0435\u043b\u044c. check_out_date (DateField): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u043e\u0442\u0435\u043b\u044f. num_guests (PositiveIntegerField): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438. additional_notes (TextField, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e. class Reservation(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) check_in_date = models.DateField() check_out_date = models.DateField() num_guests = models.PositiveIntegerField() additional_notes = models.TextField(blank=True, null=True) def __str__(self): return f'Reservation for {self.user.username} at {self.hotel.name}' \u041e\u0442\u0437\u044b\u0432 (Review) \u041c\u043e\u0434\u0435\u043b\u044c Review \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: user (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043d\u0430\u043f\u0438\u0441\u0430\u0432\u0448\u0438\u0439 \u043e\u0442\u0437\u044b\u0432. hotel (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 Hotel): \u0413\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442. check_in_date (DateField, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1970-01-01): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. check_out_date (DateField, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1970-01-01): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. review_text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430. rating (PositiveIntegerField, \u0432\u044b\u0431\u043e\u0440 \u0441 1 \u043f\u043e 10): \u0420\u0435\u0439\u0442\u0438\u043d\u0433, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. additional_comments (TextField): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. created_at (DateTimeField, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f): \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430. class Review(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) check_in_date = models.DateField(default=datetime(1970, 1, 1)) check_out_date = models.DateField(default=datetime(1970, 1, 1)) review_text = models.TextField() rating = models.PositiveIntegerField(choices=[(i, i) for i in range(1, 11)]) additional_comments = models.TextField() created_at = models.DateTimeField(auto_now_add=True) def __str__(self): return f'Review by {self.user.username} for {self.hotel.name}' \u041f\u0440\u043e\u0444\u0438\u043b\u044c (Profile) \u041c\u043e\u0434\u0435\u043b\u044c Profile \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u0434\u043d\u0438\u043c-\u043a-\u043e\u0434\u043d\u043e\u043c\u0443 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User. class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) def __str__(self): return self.user.username \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f hotel_list hotel_list - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u043e\u0442\u0435\u043b\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Hotel.objects.all() . \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0435\u043b\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. def hotel_list(request): hotels = Hotel.objects.all() return render(request, 'hotel_list.html', {'hotels': hotels}) hotel_detail hotel_detail - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Hotel.objects.get(id=hotel_id) . \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0435\u043b\u0435 \u0438 \u0444\u043b\u0430\u0433 user_has_reservation \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_detail.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. def hotel_detail(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) user_has_reservation = False if request.user.is_authenticated: user_has_reservation = Reservation.objects.filter(user=request.user, hotel=hotel).exists() context = { 'hotel': hotel, 'user_has_reservation': user_has_reservation, } return render(request, 'hotel_detail.html', context) user_login user_login - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\". def user_login(request): if request.method == 'POST': username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('hotel_list') else: pass return render(request, 'login.html') user_logout user_logout - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\". @login_required def user_logout(request): logout(request) return redirect('hotel_list') register register - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0445\u043e\u0434 \u0434\u043b\u044f \u043d\u0435\u0433\u043e. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. def register(request): if request.method == 'POST': form = UserCreationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('hotel_list') else: form = UserCreationForm() return render(request, 'register.html', {'form': form}) make_reservation make_reservation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u0437 \u0444\u043e\u0440\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_confirmation\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. @login_required def make_reservation(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == 'POST': form = ReservationForm(request.POST) if form.is_valid(): reservation = form.save(commit=False) reservation.user = request.user reservation.hotel = hotel reservation.save() return redirect('reservation_confirmation') else: form = ReservationForm() return render(request, 'make_reservation.html', {'form': form, 'hotel': hotel}) reservation_confirmation reservation_confirmation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. @login_required def reservation_confirmation(request): return render(request, 'reservation_confirmation.html') reservation_list reservation_list - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_list.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. cancel_reservation cancel_reservation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_list\" \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u043c\u0435\u043d\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. last_month_guests last_month_guests - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0433\u043e\u0441\u0442\u0435\u0439, \u0437\u0430\u0441\u0435\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u0434\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"last_month_guests.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. leave_review leave_review - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043e\u0442\u0437\u044b\u0432\u0435 \u0438\u0437 \u0444\u043e\u0440\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_detail\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430. @login_required def leave_review(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == 'POST': form = ReviewForm(request.POST) if form.is_valid(): review = form.save(commit=False) review.user = request.user review.hotel = hotel reservation = Reservation.objects.filter(user=request.user, hotel=hotel).latest('check_in_date') review.check_in_date = reservation.check_in_date review.check_out_date = reservation.check_out_date review.save() return redirect('hotel_detail', hotel_id=hotel_id) else: form = ReviewForm() return render(request, 'leave_review.html', {'form': form, 'hotel': hotel})","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"lab2/lab_2/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab2/lab_2/#registrationform","text":"RegistrationForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UserCreationForm \u0438\u0437 Django. \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: username (CharField): \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. email (EmailField): \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. password1 (CharField): \u041f\u0430\u0440\u043e\u043b\u044c. password2 (CharField): \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f. class RegistrationForm(UserCreationForm): email = forms.EmailField(max_length=100, help_text='Required. Enter a valid email address.') class Meta: model = User fields = ['username', 'email', 'password1', 'password2']","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (RegistrationForm)"},{"location":"lab2/lab_2/#reservationform","text":"ReservationForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Reservation . \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: check_in_date (DateField): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f. check_out_date (DateField): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f. num_guests (PositiveIntegerField): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439. additional_notes (TextField, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e. class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['check_in_date', 'check_out_date', 'num_guests', 'additional_notes']","title":"\u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (ReservationForm)"},{"location":"lab2/lab_2/#reviewform","text":"ReviewForm \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Review . \u0424\u043e\u0440\u043c\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: review_text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430. rating (PositiveIntegerField): \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u0442\u0437\u044b\u0432\u0430. class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['review_text', 'rating']","title":"\u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 (ReviewForm)"},{"location":"lab2/lab_2/#_2","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab2/lab_2/#hotel","text":"\u041c\u043e\u0434\u0435\u043b\u044c Hotel \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0435\u043b\u044c \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: name (CharField): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430: 200 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). owner (CharField): \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430: 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). address (TextField): \u0410\u0434\u0440\u0435\u0441 \u043e\u0442\u0435\u043b\u044f. description (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f. room_types (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. price (DecimalField): \u0426\u0435\u043d\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440: 10, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u043a\u043e\u0432: 2). capacity (PositiveIntegerField): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442\u0435\u043b\u044f. amenities (TextField): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0434\u043e\u0431\u0441\u0442\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435. from django.db import models class Hotel(models.Model): name = models.CharField(max_length=200) owner = models.CharField(max_length=100) address = models.TextField() description = models.TextField() room_types = models.TextField() price = models.DecimalField(max_digits=10, decimal_places=2) capacity = models.PositiveIntegerField() amenities = models.TextField() def __str__(self): return self.name","title":"\u041e\u0442\u0435\u043b\u044c (Hotel)"},{"location":"lab2/lab_2/#reservation","text":"\u041c\u043e\u0434\u0435\u043b\u044c Reservation \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0441\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: user (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0441\u0434\u0435\u043b\u0430\u0432\u0448\u0438\u0439 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. hotel (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 Hotel): \u041e\u0442\u0435\u043b\u044c, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. check_in_date (DateField): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0435\u043b\u044c. check_out_date (DateField): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u043e\u0442\u0435\u043b\u044f. num_guests (PositiveIntegerField): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438. additional_notes (TextField, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e. class Reservation(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) check_in_date = models.DateField() check_out_date = models.DateField() num_guests = models.PositiveIntegerField() additional_notes = models.TextField(blank=True, null=True) def __str__(self): return f'Reservation for {self.user.username} at {self.hotel.name}'","title":"\u0411\u0440\u043e\u043d\u044c (Reservation)"},{"location":"lab2/lab_2/#review","text":"\u041c\u043e\u0434\u0435\u043b\u044c Review \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438: user (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043d\u0430\u043f\u0438\u0441\u0430\u0432\u0448\u0438\u0439 \u043e\u0442\u0437\u044b\u0432. hotel (ForeignKey \u043a \u043c\u043e\u0434\u0435\u043b\u0438 Hotel): \u0413\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442. check_in_date (DateField, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1970-01-01): \u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. check_out_date (DateField, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 1970-01-01): \u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. review_text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430. rating (PositiveIntegerField, \u0432\u044b\u0431\u043e\u0440 \u0441 1 \u043f\u043e 10): \u0420\u0435\u0439\u0442\u0438\u043d\u0433, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. additional_comments (TextField): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. created_at (DateTimeField, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f): \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430. class Review(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) check_in_date = models.DateField(default=datetime(1970, 1, 1)) check_out_date = models.DateField(default=datetime(1970, 1, 1)) review_text = models.TextField() rating = models.PositiveIntegerField(choices=[(i, i) for i in range(1, 11)]) additional_comments = models.TextField() created_at = models.DateTimeField(auto_now_add=True) def __str__(self): return f'Review by {self.user.username} for {self.hotel.name}'","title":"\u041e\u0442\u0437\u044b\u0432 (Review)"},{"location":"lab2/lab_2/#profile","text":"\u041c\u043e\u0434\u0435\u043b\u044c Profile \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u0434\u043d\u0438\u043c-\u043a-\u043e\u0434\u043d\u043e\u043c\u0443 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a \u043c\u043e\u0434\u0435\u043b\u0438 User. class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) def __str__(self): return self.user.username","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c (Profile)"},{"location":"lab2/lab_2/#_3","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab2/lab_2/#hotel_list","text":"hotel_list - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u043e\u0442\u0435\u043b\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Hotel.objects.all() . \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0435\u043b\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. def hotel_list(request): hotels = Hotel.objects.all() return render(request, 'hotel_list.html', {'hotels': hotels})","title":"hotel_list"},{"location":"lab2/lab_2/#hotel_detail","text":"hotel_detail - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Hotel.objects.get(id=hotel_id) . \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0435\u043b\u044f. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0435\u043b\u0435 \u0438 \u0444\u043b\u0430\u0433 user_has_reservation \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_detail.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. def hotel_detail(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) user_has_reservation = False if request.user.is_authenticated: user_has_reservation = Reservation.objects.filter(user=request.user, hotel=hotel).exists() context = { 'hotel': hotel, 'user_has_reservation': user_has_reservation, } return render(request, 'hotel_detail.html', context)","title":"hotel_detail"},{"location":"lab2/lab_2/#user_login","text":"user_login - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\". def user_login(request): if request.method == 'POST': username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('hotel_list') else: pass return render(request, 'login.html')","title":"user_login"},{"location":"lab2/lab_2/#user_logout","text":"user_logout - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\". @login_required def user_logout(request): logout(request) return redirect('hotel_list')","title":"user_logout"},{"location":"lab2/lab_2/#register","text":"register - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0445\u043e\u0434 \u0434\u043b\u044f \u043d\u0435\u0433\u043e. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_list\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. def register(request): if request.method == 'POST': form = UserCreationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('hotel_list') else: form = UserCreationForm() return render(request, 'register.html', {'form': form})","title":"register"},{"location":"lab2/lab_2/#make_reservation","text":"make_reservation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u0437 \u0444\u043e\u0440\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_confirmation\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. @login_required def make_reservation(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == 'POST': form = ReservationForm(request.POST) if form.is_valid(): reservation = form.save(commit=False) reservation.user = request.user reservation.hotel = hotel reservation.save() return redirect('reservation_confirmation') else: form = ReservationForm() return render(request, 'make_reservation.html', {'form': form, 'hotel': hotel})","title":"make_reservation"},{"location":"lab2/lab_2/#reservation_confirmation","text":"reservation_confirmation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. @login_required def reservation_confirmation(request): return render(request, 'reservation_confirmation.html')","title":"reservation_confirmation"},{"location":"lab2/lab_2/#reservation_list","text":"reservation_list - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_list.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.","title":"reservation_list"},{"location":"lab2/lab_2/#cancel_reservation","text":"cancel_reservation - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043c\u0435\u043d\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"reservation_list\" \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u043c\u0435\u043d\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.","title":"cancel_reservation"},{"location":"lab2/lab_2/#last_month_guests","text":"last_month_guests - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0433\u043e\u0441\u0442\u0435\u0439, \u0437\u0430\u0441\u0435\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u0434\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"last_month_guests.html\" \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.","title":"last_month_guests"},{"location":"lab2/lab_2/#leave_review","text":"leave_review - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043e\u0442\u0437\u044b\u0432\u0435 \u0438\u0437 \u0444\u043e\u0440\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \"hotel_detail\" \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430. @login_required def leave_review(request, hotel_id): hotel = Hotel.objects.get(id=hotel_id) if request.method == 'POST': form = ReviewForm(request.POST) if form.is_valid(): review = form.save(commit=False) review.user = request.user review.hotel = hotel reservation = Reservation.objects.filter(user=request.user, hotel=hotel).latest('check_in_date') review.check_in_date = reservation.check_in_date review.check_out_date = reservation.check_out_date review.save() return redirect('hotel_detail', hotel_id=hotel_id) else: form = ReviewForm() return render(request, 'leave_review.html', {'form': form, 'hotel': hotel})","title":"leave_review"},{"location":"lab3/lab_3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b from rest_framework import serializers from library_app.models import Book, Reader, Hall, Ownership, Availability class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = '__all__' class ReaderSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = '__all__' class HallSerializer(serializers.ModelSerializer): class Meta: model = Hall fields = '__all__' class OwnershipSerializer(serializers.ModelSerializer): class Meta: model = Ownership fields = '__all__' class AvailabilitySerializer(serializers.ModelSerializer): class Meta: model = Availability fields = '__all__' class GoodBookSerializer(serializers.ModelSerializer): halls = HallSerializer(many=True) class Meta: model = Book fields = '__all__' API view from django.shortcuts import render from rest_framework import generics, status, permissions from rest_framework.response import Response from rest_framework.views import APIView from library_app.models import Book, Hall, Reader, Ownership, Availability from library_app.serializers import BookSerializer, HallSerializer, ReaderSerializer, OwnershipSerializer, \\ AvailabilitySerializer, GoodBookSerializer class BookListView(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookRetrieveView(generics.RetrieveAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookCreateView(generics.CreateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookUpdateView(generics.UpdateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookDeleteView(generics.DestroyAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class HallListView(generics.ListAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallRetrieveView(generics.RetrieveAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallCreateView(generics.CreateAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallUpdateView(generics.UpdateAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallDeleteView(generics.DestroyAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderListView(generics.ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderRetrieveView(generics.RetrieveAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderCreateView(generics.CreateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderUpdateView(generics.UpdateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderDeleteView(generics.DestroyAPIView): queryset = Reader.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipListView(generics.ListAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipRetrieveView(generics.RetrieveAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipCreateView(generics.CreateAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipUpdateView(generics.UpdateAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipDeleteView(generics.DestroyAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityListView(generics.ListAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityRetrieveView(generics.RetrieveAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityCreateView(generics.CreateAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityUpdateView(generics.UpdateAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityDeleteView(generics.DestroyAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class LogOut(APIView): def get(self, request, format=None): request.user.auth_token.delete() return Response(status=status.HTTP_200_OK) class GoodBookRetrieveView(generics.RetrieveAPIView): queryset = Book.objects.all() serializer_class = GoodBookSerializer permission_classes = [permissions.IsAuthenticated, ] class AvailableBooks(generics.ListAPIView): serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] def get_queryset(self): reader = self.kwargs['reader'] reader = Reader.objects.get(pk=reader) books = reader.hall.books return books URLS from django.urls import path, include from rest_framework.authtoken.views import obtain_auth_token from .views import * urlpatterns = [ path('books/all/', BookListView.as_view(), name='books_list'), path('books/<int:pk>/', BookRetrieveView.as_view(), name='books_detail'), path('books/create/', BookCreateView.as_view(), name='books_create'), path('books/update/<int:pk>/', BookUpdateView.as_view(), name='books_update'), path('books/delete/<int:pk>/', BookDeleteView.as_view(), name='books_delete'), path('halls/all/', HallListView.as_view(), name='halls_list'), path('halls/<int:pk>/', HallRetrieveView.as_view(), name='halls_detail'), path('halls/create/', HallCreateView.as_view(), name='halls_create'), path('halls/update/<int:pk>/', HallUpdateView.as_view(), name='halls_update'), path('halls/delete/<int:pk>/', HallDeleteView.as_view(), name='halls_delete'), path('readers/all/', ReaderListView.as_view(), name='readers_list'), path('readers/<int:pk>/', ReaderRetrieveView.as_view(), name='readers_detail'), path('readers/create/', ReaderCreateView.as_view(), name='readers_create'), path('readers/update/<int:pk>/', ReaderUpdateView.as_view(), name='readers_update'), path('readers/delete/<int:pk>/', ReaderDeleteView.as_view(), name='readers_delete'), path('ownerships/all/', OwnershipListView.as_view(), name='ownerships_list'), path('ownerships/<int:pk>/', OwnershipRetrieveView.as_view(), name='ownerships_detail'), path('ownerships/create/', OwnershipCreateView.as_view(), name='ownerships_create'), path('ownerships/update/<int:pk>/', OwnershipUpdateView.as_view(), name='ownerships_update'), path('ownerships/delete/<int:pk>/', OwnershipDeleteView.as_view(), name='ownerships_delete'), path('availabilities/all/', AvailabilityListView.as_view(), name='availabilities_list'), path('availabilities/<int:pk>/', AvailabilityRetrieveView.as_view(), name='availabilities_detail'), path('availabilities/create/', AvailabilityCreateView.as_view(), name='availabilities_create'), path('availabilities/update/<int:pk>/', AvailabilityUpdateView.as_view(), name='availabilities_update'), path('availabilities/delete/<int:pk>/', AvailabilityDeleteView.as_view(), name='availabilities_delete'), path('good_book/<int:pk>/', GoodBookRetrieveView.as_view(), name='good_book'), path('available_books/<int:reader>/', AvailableBooks.as_view(), name='available_books'), path('auth/', include('djoser.urls')), path('auth/token', obtain_auth_token, name='token'), path('logout', LogOut.as_view()), ] \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u0430\u043b\u0430 \u043f\u043e id \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441 \u0437\u0430\u043b\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e \u043a\u043d\u0438\u0433","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"lab3/lab_3/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab3/lab_3/#_2","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/lab_3/#_3","text":"from rest_framework import serializers from library_app.models import Book, Reader, Hall, Ownership, Availability class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = '__all__' class ReaderSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = '__all__' class HallSerializer(serializers.ModelSerializer): class Meta: model = Hall fields = '__all__' class OwnershipSerializer(serializers.ModelSerializer): class Meta: model = Ownership fields = '__all__' class AvailabilitySerializer(serializers.ModelSerializer): class Meta: model = Availability fields = '__all__' class GoodBookSerializer(serializers.ModelSerializer): halls = HallSerializer(many=True) class Meta: model = Book fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"lab3/lab_3/#api-view","text":"from django.shortcuts import render from rest_framework import generics, status, permissions from rest_framework.response import Response from rest_framework.views import APIView from library_app.models import Book, Hall, Reader, Ownership, Availability from library_app.serializers import BookSerializer, HallSerializer, ReaderSerializer, OwnershipSerializer, \\ AvailabilitySerializer, GoodBookSerializer class BookListView(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookRetrieveView(generics.RetrieveAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookCreateView(generics.CreateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookUpdateView(generics.UpdateAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class BookDeleteView(generics.DestroyAPIView): queryset = Book.objects.all() serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] class HallListView(generics.ListAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallRetrieveView(generics.RetrieveAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallCreateView(generics.CreateAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallUpdateView(generics.UpdateAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class HallDeleteView(generics.DestroyAPIView): queryset = Hall.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderListView(generics.ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderRetrieveView(generics.RetrieveAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderCreateView(generics.CreateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderUpdateView(generics.UpdateAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer permission_classes = [permissions.IsAuthenticated, ] class ReaderDeleteView(generics.DestroyAPIView): queryset = Reader.objects.all() serializer_class = HallSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipListView(generics.ListAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipRetrieveView(generics.RetrieveAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipCreateView(generics.CreateAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipUpdateView(generics.UpdateAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class OwnershipDeleteView(generics.DestroyAPIView): queryset = Ownership.objects.all() serializer_class = OwnershipSerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityListView(generics.ListAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityRetrieveView(generics.RetrieveAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityCreateView(generics.CreateAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityUpdateView(generics.UpdateAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class AvailabilityDeleteView(generics.DestroyAPIView): queryset = Availability.objects.all() serializer_class = AvailabilitySerializer permission_classes = [permissions.IsAuthenticated, ] class LogOut(APIView): def get(self, request, format=None): request.user.auth_token.delete() return Response(status=status.HTTP_200_OK) class GoodBookRetrieveView(generics.RetrieveAPIView): queryset = Book.objects.all() serializer_class = GoodBookSerializer permission_classes = [permissions.IsAuthenticated, ] class AvailableBooks(generics.ListAPIView): serializer_class = BookSerializer permission_classes = [permissions.IsAuthenticated, ] def get_queryset(self): reader = self.kwargs['reader'] reader = Reader.objects.get(pk=reader) books = reader.hall.books return books","title":"API view"},{"location":"lab3/lab_3/#urls","text":"from django.urls import path, include from rest_framework.authtoken.views import obtain_auth_token from .views import * urlpatterns = [ path('books/all/', BookListView.as_view(), name='books_list'), path('books/<int:pk>/', BookRetrieveView.as_view(), name='books_detail'), path('books/create/', BookCreateView.as_view(), name='books_create'), path('books/update/<int:pk>/', BookUpdateView.as_view(), name='books_update'), path('books/delete/<int:pk>/', BookDeleteView.as_view(), name='books_delete'), path('halls/all/', HallListView.as_view(), name='halls_list'), path('halls/<int:pk>/', HallRetrieveView.as_view(), name='halls_detail'), path('halls/create/', HallCreateView.as_view(), name='halls_create'), path('halls/update/<int:pk>/', HallUpdateView.as_view(), name='halls_update'), path('halls/delete/<int:pk>/', HallDeleteView.as_view(), name='halls_delete'), path('readers/all/', ReaderListView.as_view(), name='readers_list'), path('readers/<int:pk>/', ReaderRetrieveView.as_view(), name='readers_detail'), path('readers/create/', ReaderCreateView.as_view(), name='readers_create'), path('readers/update/<int:pk>/', ReaderUpdateView.as_view(), name='readers_update'), path('readers/delete/<int:pk>/', ReaderDeleteView.as_view(), name='readers_delete'), path('ownerships/all/', OwnershipListView.as_view(), name='ownerships_list'), path('ownerships/<int:pk>/', OwnershipRetrieveView.as_view(), name='ownerships_detail'), path('ownerships/create/', OwnershipCreateView.as_view(), name='ownerships_create'), path('ownerships/update/<int:pk>/', OwnershipUpdateView.as_view(), name='ownerships_update'), path('ownerships/delete/<int:pk>/', OwnershipDeleteView.as_view(), name='ownerships_delete'), path('availabilities/all/', AvailabilityListView.as_view(), name='availabilities_list'), path('availabilities/<int:pk>/', AvailabilityRetrieveView.as_view(), name='availabilities_detail'), path('availabilities/create/', AvailabilityCreateView.as_view(), name='availabilities_create'), path('availabilities/update/<int:pk>/', AvailabilityUpdateView.as_view(), name='availabilities_update'), path('availabilities/delete/<int:pk>/', AvailabilityDeleteView.as_view(), name='availabilities_delete'), path('good_book/<int:pk>/', GoodBookRetrieveView.as_view(), name='good_book'), path('available_books/<int:reader>/', AvailableBooks.as_view(), name='available_books'), path('auth/', include('djoser.urls')), path('auth/token', obtain_auth_token, name='token'), path('logout', LogOut.as_view()), ]","title":"URLS"},{"location":"lab3/lab_3/#_4","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab3/lab_3/#_5","text":"","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab3/lab_3/#_6","text":"","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430"},{"location":"lab3/lab_3/#id","text":"","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u0430\u043b\u0430 \u043f\u043e id"},{"location":"lab3/lab_3/#_7","text":"","title":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441 \u0437\u0430\u043b\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430"},{"location":"lab3/lab_3/#_8","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e \u043a\u043d\u0438\u0433"},{"location":"lab4/lab_4/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0444\u043e\u0440\u043d\u0442\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e api \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u044c \u0434\u043b\u044f 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0425\u043e\u0434 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 ReactJS. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442: \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430/\u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439: \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430/\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432 \u0424\u043e\u0440\u043c\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0424\u043e\u0440\u043c\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4"},{"location":"lab4/lab_4/#no4","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164"},{"location":"lab4/lab_4/#_1","text":"\u041e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0444\u043e\u0440\u043d\u0442\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e api","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab4/lab_4/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u044c \u0434\u043b\u044f 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab4/lab_4/#_3","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 ReactJS. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442: \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430/\u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439: \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430/\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432 \u0424\u043e\u0440\u043c\u0430 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0424\u043e\u0440\u043c\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f","title":"\u0425\u043e\u0434 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:"},{"location":"practical/pw-3.1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data # Create 6 car owners owners_data = [ { \"username\": \"owner1\", \"password\": \"password1\", \"first_name\": \"John\", \"last_name\": \"Doe\", }, { \"username\": \"owner2\", \"password\": \"password2\", \"first_name\": \"Jane\", \"last_name\": \"Doe\", }, { \"username\": \"owner3\", \"password\": \"password3\", \"first_name\": \"Alice\", \"last_name\": \"Smith\", }, { \"username\": \"owner4\", \"password\": \"password4\", \"first_name\": \"Bob\", \"last_name\": \"Johnson\", }, { \"username\": \"owner5\", \"password\": \"password5\", \"first_name\": \"Eva\", \"last_name\": \"Brown\", }, { \"username\": \"owner6\", \"password\": \"password6\", \"first_name\": \"Charlie\", \"last_name\": \"Miller\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u0432\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c # Create 6 cars cars_data = [ {\"number\": \"ABC123\", \"model\": \"Toyota\", \"color\": \"Blue\"}, {\"number\": \"XYZ456\", \"model\": \"Honda\", \"color\": \"Red\"}, {\"number\": \"DEF789\", \"model\": \"Ford\", \"color\": \"Green\"}, {\"number\": \"GHI123\", \"model\": \"Chevrolet\", \"color\": \"Black\"}, {\"number\": \"JKL456\", \"model\": \"Tesla\", \"color\": \"White\"}, {\"number\": \"MNO789\", \"model\": \"BMW\", \"color\": \"Silver\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): Ownership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0418 \u0435\u0449\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"_type\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriversLicence.objects.create(**data) \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: ./manage.py shell < 3.1/ex1.py \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Toyota \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter toyota_cars = Car.objects.filter(model=\"Toyota\") for car in toyota_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Alice \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter alice_drivers = CarOwner.objects.filter(first_name=\"Alice\") for driver in alice_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriversLicence.objects.filter driver = CarOwner.objects.get(first_name=\"Jane\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") driver_licenses = DriversLicence.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license._type}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter # Query all car owners with red cars red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( ownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.date_of_birth}\") print(\"--------------------\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query the oldest drivers license oldest_license = DriversLicence.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 # query the oldest ownership date oldest_ownership = Ownership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f # query the number of cars for each driver using Count annotate owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"ownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 # query number of cars by model cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"ownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query all car owners sorted by drivers license issue date owners_by_license_issue_date = CarOwner.objects.order_by(\"driverslicence__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(f\"License Issue Date: {owner.driverslicence.get().issue_date}\") print(\"--------------------\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practical/pw-3.1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practical/pw-3.1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data # Create 6 car owners owners_data = [ { \"username\": \"owner1\", \"password\": \"password1\", \"first_name\": \"John\", \"last_name\": \"Doe\", }, { \"username\": \"owner2\", \"password\": \"password2\", \"first_name\": \"Jane\", \"last_name\": \"Doe\", }, { \"username\": \"owner3\", \"password\": \"password3\", \"first_name\": \"Alice\", \"last_name\": \"Smith\", }, { \"username\": \"owner4\", \"password\": \"password4\", \"first_name\": \"Bob\", \"last_name\": \"Johnson\", }, { \"username\": \"owner5\", \"password\": \"password5\", \"first_name\": \"Eva\", \"last_name\": \"Brown\", }, { \"username\": \"owner6\", \"password\": \"password6\", \"first_name\": \"Charlie\", \"last_name\": \"Miller\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u0432\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c # Create 6 cars cars_data = [ {\"number\": \"ABC123\", \"model\": \"Toyota\", \"color\": \"Blue\"}, {\"number\": \"XYZ456\", \"model\": \"Honda\", \"color\": \"Red\"}, {\"number\": \"DEF789\", \"model\": \"Ford\", \"color\": \"Green\"}, {\"number\": \"GHI123\", \"model\": \"Chevrolet\", \"color\": \"Black\"}, {\"number\": \"JKL456\", \"model\": \"Tesla\", \"color\": \"White\"}, {\"number\": \"MNO789\", \"model\": \"BMW\", \"color\": \"Silver\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): Ownership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0418 \u0435\u0449\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"_type\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriversLicence.objects.create(**data) \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: ./manage.py shell < 3.1/ex1.py","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"practical/pw-3.1/#2","text":"\u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Toyota \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter toyota_cars = Car.objects.filter(model=\"Toyota\") for car in toyota_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Alice \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter alice_drivers = CarOwner.objects.filter(first_name=\"Alice\") for driver in alice_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriversLicence.objects.filter driver = CarOwner.objects.get(first_name=\"Jane\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.date_of_birth}\") print(\"--------------------\") driver_licenses = DriversLicence.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license._type}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter # Query all car owners with red cars red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( ownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.date_of_birth}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"practical/pw-3.1/#3","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query the oldest drivers license oldest_license = DriversLicence.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 # query the oldest ownership date oldest_ownership = Ownership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f # query the number of cars for each driver using Count annotate owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"ownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 # query number of cars by model cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"ownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f # query all car owners sorted by drivers license issue date owners_by_license_issue_date = CarOwner.objects.order_by(\"driverslicence__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(f\"License Issue Date: {owner.driverslicence.get().issue_date}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"}]}